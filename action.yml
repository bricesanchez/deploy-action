name: 'runx'
description: 'Magical Infrastructure and Deploys'
inputs:
  ecr-repo:  # id of input
    description: 'The ecr repo that is being deployed'
    required: true
  image_version:
    description: 'The version number of the image that is being deployed'
    required: false
    default: '${{ github.sha }}'
  ssh_key:
    description: 'An ssh key that allows this action to access github'
    required: false
    default: '${{ secrets.SSH_KEY }}'
  aws-access-key-id:
    description: 'Your AWS access key id'
    required: false
    default: ${{ secrets.DEPLOYER_AWS_ACCESS_KEY }}
  aws-secret-access-key:
    description: 'Your aws secret access key'
    required: false
    default: ${{ secrets.DEPLOYER_AWS_SECRET_ACCESS_KEY }}

runs:
  runs-on: ubuntu-latest
  env:
    ECR_REPO: ${{ inputs.ecr-repo }}
    IMAGE_VERSION: ${{ inputs.image-version }}

  steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Setup ssh
      uses: webfactory/ssh-agent@v0.4.1
      with:
        ssh-private-key: ${{ inputs.ssh_key }}

    - name: Checkout runxc
      uses: actions/checkout@v2
      with:
        repository: "run-x/runxc"
        path: "runxc"
        ssh-key: ${{ inputs.ssh_key }}

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    # TODO: change this part of the action to not reference the runx repo, but instead
    #       just run the relevant binary
    - name: Install opta dependencies
      run: |
        pip install pipenv
        pipenv install --deploy --dev
        source $(pipenv --venv)/bin/activate
      working-directory: runxc

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ secrets.DEPLOYER_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build image
      run: docker build -t app:latest -f srv/Dockerfile .

    - name: Push docker image
      run: |
        docker tag app:latest $ECR_REPO:$IMAGE_VERSION
        docker push $ECR_REPO:$IMAGE_VERSION

    - name: Update deployment
      run: |
        source $(pipenv --venv)/bin/activate
        export PYTHONPATH=$(pwd)
        cd ..
        yes | python ./runxc/opta/cli.py gen --var tag=$IMAGE_VERSION --env runx-staging
      working-directory: runxc
